buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		dependencies {
			classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
		classpath "io.spring.gradle:dependency-management-plugin:$springDependenciesManagementVersion"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:latest.release"
		classpath "io.freefair.gradle:lombok-plugin:latest.release"
	}
}

plugins {
	id 'java'
	id 'java-library'
	id 'org.springframework.boot' version "$springBootPluginVersion"
	id 'io.spring.dependency-management' version "$springDependenciesManagementVersion"
	id 'jacoco'
	id "io.freefair.lombok" version "${lombokPluginVersion}"
	id "org.sonarqube" version "${sonarqubePluginVersion}"
	id "application"
	id("org.hibernate.orm") version "${hibernatePluginVersion}"
}

group = 'com.dbaotrung.example'
version = "${projectVersion}"

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url = "https://s01.oss.sonatype.org/content/groups/public/"
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootPluginVersion"
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

java {
	sourceCompatibility = "${javaSourceCompatibility}"
	targetCompatibility = "${javaSourceCompatibility}"
}

mainClassName = "com.dbaotrung.example.coffee.order.CoffeeOrderApplication"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring
	implementation ('org.springframework.boot:spring-boot-starter')
	implementation ("org.springframework.boot:spring-boot-starter-tomcat")
	implementation ('org.springframework.boot:spring-boot-starter-validation')
	implementation (group: 'org.springframework.boot', name: 'spring-boot-starter-web')
	implementation (group: 'org.springframework.boot', name: 'spring-boot-starter-aop')
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
	// PostgreSQL
	implementation group: 'org.postgresql', name: 'postgresql', version: "${postgresqlVersion}"
	implementation (group: 'org.hibernate', name: 'hibernate-entitymanager', version: "${hibernateVersion}") {
		exclude group: 'javax.persistence', module: 'javax.persistence-api'
		exclude group: 'javax.activation', module: 'javax.activation-api'
		exclude group: 'javax.xml.bind', module: 'jaxb-api'
	}
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: "${hibernateValidatorVersion}"
	implementation group: 'org.hibernate.orm', name: 'hibernate-hikaricp', version: "${hibernateHikaricpVersion}"
	// Spring doc
	implementation (group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: "$springDocApiVersion")

	// Common
	implementation group: 'commons-beanutils', name: 'commons-beanutils', version: "${beanutilsVersion}"
	implementation group: 'org.mapstruct', name: 'mapstruct', version: "${mapstructVersion}"

	// Rest client
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: "${cloudOpenfeignVersion}"

	// Liquibase
	implementation group: 'org.liquibase', name: 'liquibase-core', version: "${liquibaseVersion}"
	// Test
	testImplementation ('org.springframework.boot:spring-boot-starter-test')
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.5.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "${jacocoToolVersion}"
	reportsDirectory = layout.buildDirectory.dir("jacoco").get()
}

test {

	useJUnitPlatform()

	// report is always generated after tests run
	finalizedBy jacocoTestReport

	jacoco {
		classDumpDir = layout.buildDirectory.file("jacoco/classpathdumps").get().asFile
		enabled = true
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = UUID.randomUUID().toString()
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}
}

jacocoTestReport {
	// tests are required to run before generating the report
	dependsOn test
	mustRunAfter test

	reports {
		html.required = true
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir("jacoco/html").get().asFile
		xml.outputLocation = layout.buildDirectory.file("jacoco/jacoco-report.xml").get().asFile
		csv.outputLocation = layout.buildDirectory.file("jacoco/jacoco-report.csv").get().asFile
	}

	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/ex/*', '**/pojo/*', '**/model/*', '**/dto/*', '**/config/*', '**/log/*'
			])
		})
	}
}