
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
        classpath "io.spring.gradle:dependency-management-plugin:$springDependenciesManagementVersion"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version "$springBootPluginVersion"
    id 'io.spring.dependency-management' version "$springDependenciesManagementVersion"
    id 'jacoco'
    id "io.freefair.lombok" version "${lombokPluginVersion}"
    id "org.sonarqube" version "${sonarqubePluginVersion}"
    id "application"
    id("org.hibernate.orm") version "${hibernatePluginVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootPluginVersion"
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

repositories {
    mavenCentral()
}

def jacocoExclList = ['**/ex/*', '**/pojo/*', '**/model/*', '**/dto/*', '**/config/*', '**/log/*']

configure(subprojects - project(":common")) {
    println("${project}")
    buildscript {
        repositories {
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
            dependencies {
                classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
            }
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
            classpath "io.spring.gradle:dependency-management-plugin:$springDependenciesManagementVersion"
            classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:latest.release"
            classpath "io.freefair.gradle:lombok-plugin:latest.release"
        }
    }

    repositories {
        mavenCentral()
    }

    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "maven-publish"
    apply plugin: "application"

    java {
        sourceCompatibility = "${javaSourceCompatibility}"
        targetCompatibility = "${javaSourceCompatibility}"
    }

    println("${projectDir}")

    repositories {
        maven {
            url "https://s01.oss.sonatype.org/content/groups/public/"
        }
        mavenCentral()
    }

    jar {
        enabled = false
    }

    processResources.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    distTar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    distZip.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    sourceSets {
        main {
            resources {
                srcDirs += "../shared-resources"
                println srcDirs
            }
        }
    }

    jacoco {
        toolVersion = "${jacocoToolVersion}"
        reportsDirectory = file("$buildDir/jacoco")
    }

    test {

        useJUnitPlatform()

        // report is always generated after tests run
        finalizedBy jacocoTestReport

        jacoco {
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
            enabled = true
            destinationFile = file("$buildDir/jacoco/${name}.exec")
            includes = []
            excludes = []
            excludeClassLoaders = []
            includeNoLocationClasses = false
            sessionId = UUID.randomUUID().toString()
            dumpOnExit = true
            classDumpDir = null
            output = JacocoTaskExtension.Output.FILE
            address = "localhost"
            port = 6300
            jmx = false
        }
    }

    jacocoTestReport {
        // tests are required to run before generating the report
        dependsOn test
        mustRunAfter test

        reports {
            html.required = true
            xml.required = true
            csv.required = true
            html.destination file("${buildDir}/jacoco/html")
            xml.destination file("${buildDir}/jacoco/jacoco-report.xml")
            csv.destination file("${buildDir}/jacoco/jacoco-report.csv")
        }

        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclList)
            })
        }
    }
//    build.dependsOn(project(":common").task("build"))
//    build.mustRunAfter(project(":common").task("build"))
}